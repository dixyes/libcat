name: tests

on: [push, pull_request]

jobs:
  win-tests:
    name: Test on ${{matrix.os}} build-type ${{matrix.build-type}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ "windows-latest" ]
        build-type: [ "Debug", "Release"]
        #build-type: [ "Debug" ]
      max-parallel: 2
      fail-fast: false
    steps:
      - name: Fetch vcpkg versions from github
        run: |
          Write-Host "::group::Fetching CONTROL from raw.githubusercontent.com"
          (Invoke-WebRequest https://raw.githubusercontent.com/microsoft/vcpkg/master/ports/gtest/CONTROL -UseBasicParsing).Content > ${{github.workspace}}/.vcpkgvers
          (Invoke-WebRequest https://raw.githubusercontent.com/microsoft/vcpkg/master/ports/openssl/CONTROL -UseBasicParsing).Content >> ${{github.workspace}}/.vcpkgvers
          (Invoke-WebRequest https://raw.githubusercontent.com/microsoft/vcpkg/master/ports/curl/CONTROL -UseBasicParsing).Content >> ${{github.workspace}}/.vcpkgvers
          (Invoke-WebRequest https://raw.githubusercontent.com/microsoft/vcpkg/master/ports/zlib/CONTROL -UseBasicParsing).Content >> ${{github.workspace}}/.vcpkgvers
          Write-Host "::endgroup::"
          Write-Host "::group::Show now vers"
          Get-Content ${{github.workspace}}/.vcpkgvers
          Write-Host "::endgroup::"

      - name: Cache vcpkg
        uses: actions/cache@v2
        id: cache-gtest
        with:
          path: |
            C:\vcpkg\packages\gtest_x64-windows
            C:\vcpkg\packages\openssl_x64-windows
            C:\vcpkg\packages\curl_x64-windows
            C:\vcpkg\packages\zlib_x64-windows
            C:\vcpkg\installed\*
            #C:\vcpkg\buildtrees\openssl
            #C:\vcpkg\buildtrees\curl
            #C:\vcpkg\buildtrees\gtest
            #C:\vcpkg\buildtrees\detect_compiler
            C:\vcpkg\downloads\*
            C:\Users\runneradmin\AppData\Local\vcpkg\archives
          key: Windows-vcpkg-${{ hashFiles('.vcpkgvers') }}

      - name: Install vcpkg dependencies
        shell: cmd
        run: |
          vcpkg install gtest:x64-windows && ^
          vcpkg install openssl:x64-windows && ^
          vcpkg install curl[core,non-http,ssl]:x64-windows

      - name: Checkout libcat sources
        uses: actions/checkout@v2

      - name: Build and test libcat
        shell: cmd
        run: |
          @ECHO OFF
          ECHO ::group::Create build dir
          MKDIR build && CD build || goto error
          ECHO ::endgroup::
          ECHO ::group::Make cmake cache
          cmake .. ^
            -DCMAKE_CXX_FLAGS=/std:c++latest ^
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} ^
            -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%\scripts\buildsystems\vcpkg.cmake || goto error
          ECHO ::endgroup::
          ECHO ::group::Build libcat
          cmake --build . -j --target cat_tests -- -nologo || goto error
          ECHO ::endgroup::
          ECHO ::group::Test libcat
          REM TODO: make sure this path
          REM note: 颜色是不可能有颜色的，只能等gtest做这个功能或者githubactions支持那两个WIN32API
          REM note: ^ yet impossible to add color, we can only wait for github actions support SetConsoleAttribute or gtest support unix color on windows
          Debug\cat_tests.exe --gtest_color=yes || goto error
          ECHO ::endgroup::
          EXIT /b 0
          
          :error
          EXIT /b %errorlevel%

  unix-tests:
    name: Test on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "macos-latest" ]
        #os: [ "ubuntu-latest"]
        #os: [ "macos-latest"]
      max-parallel: 2
      fail-fast: false
    steps:
      - name: Install dependencies
        shell: bash
        run: |
          if [ "${{runner.os}}" = "Linux" ]
          then
            sudo apt-get install -yyq libgtest-dev libcurl4-openssl-dev
          else
            brew install googletest
          fi
      
      - name: Checkout libcat sources
        uses: actions/checkout@v2
        with:
          path: libcat

      - name: Build libcat and Run tests
        shell: bash
        working-directory: libcat
        run: |
          ${{ runner.os == 'macOS' && 'export PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig"' || '' }}
          echo "::group::Create build dir"
          mkdir -p build && cd build || exit 1
          echo "::endgroup::"
          echo "::group::Make cmake cache"
          cmake .. \
            -DCMAKE_CXX_FLAGS="-std=c++11" \
            ${{ (runner.os == 'Linux' && '' != secrets.CODECOV_TOKEN) && '-DCODE_COVERAGE=ON' || '' }} \
            -DCMAKE_C_FLAGS_DEBUG="-Werror" \
            -DCMAKE_CXX_FLAGS_DEBUG="-Werror" || exit 1
          echo "::endgroup::"
          echo "::group::Build libcat"
          cmake --build . -j --target cat_tests || exit 1
          echo "::endgroup::"
          echo "::group::Test libcat"
          ./cat_tests --gtest_color=yes || exit 1
          echo "::endgroup::"

      - name: Coverage tests
        if: runner.os == 'Linux'
        working-directory: libcat
        shell: bash
        run: |
          [ x"${{ secrets.CODECOV_TOKEN }}" != x"" ] || {
            echo "No CODECOV_TOKEN set, skipping coverage tests"
            exit 0
          }
          sudo apt-get install lcov &&
          lcov \
            --capture \
            --directory "." \
            --output-file coverage.info &&
          lcov \
            --extract coverage.info \
              "${{github.workspace}}/libcat/include/*" \
              "${{github.workspace}}/libcat/src/*" \
            --output-file coverage.info &&
          lcov --list coverage.info &&
          curl -s https://codecov.io/bash -o codecov.sh &&
          chmod +x codecov.sh &&
          ./codecov.sh -f coverage.info -t ${{ secrets.CODECOV_TOKEN }}
